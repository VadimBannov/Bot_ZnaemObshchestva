import telebot
from config import LOGS, DB_TABLE_NAME, COUNT_LAST_MSG
from creds import get_bot_token
import logging
from database import (
    prepare_db,
    insert_row,
    is_value_in_table,
    select_n_last_messages
)
from validators import (
    check_number_of_users,
    is_gpt_token_limit,
    is_tts_symbol_limit,
    is_stt_block_limit
)
from yandex_gpt import ask_gpt
from speechkit import speech_to_text


bot = telebot.TeleBot(get_bot_token())

prepare_db()

logging.basicConfig(filename=LOGS, level=logging.ERROR,
                    format="%(asctime)s FILE: %(filename)s IN: %(funcName)s MESSAGE: %(message)s",
                    filemode="w")


@bot.message_handler(commands=["start"])
def start_command(message):
    user_name, user_id = message.from_user.first_name, message.from_user.id

    if (not is_value_in_table(DB_TABLE_NAME, "user_id", user_id)
            and insert_row([user_id, None, None, 0, 0, 0]) is False):
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å /start ")
        return

    bot.send_photo(message.chat.id, open('pictures/1.jpg', 'rb'),
                   f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {user_name}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É!')


@bot.message_handler(commands=["help"])
def help_command(message):
    bot.send_message(message.chat.id, "üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
                                      "–ö–æ–º–∞–Ω–¥—ã:\n"
                                      "/help: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n"
                                      "/about: –£–∑–Ω–∞—Ç—å –æ –±–æ—Ç–µ\n\n"
                                      "–û–±—â–µ–Ω–∏–µ:\n"
                                      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å "
                                      "–ø–æ–º–æ—â—å—é API Yandex –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. "
                                      "–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                                      "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
                                      "–ë–æ—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤. –í —Å–ª—É—á–∞–µ "
                                      "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")


@bot.message_handler(commands=["about"])
def help_command(message):
    bot.send_message(message.chat.id, "ü§ñ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:\n\n"
                                      "–ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é API Yandex –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é "
                                      "–º–æ–¥–µ–ª–∏ YaGPT. –û—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–ª–∏ "
                                      "—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")


@bot.message_handler(commands=['debug'])
def debug(message):
    with open("logs.txt", "rb") as f:
        bot.send_document(message.chat.id, f)


@bot.message_handler(content_types=['voice'])
def handle_voice(message: telebot.types.Message):
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        status_check_users, error_message = check_number_of_users(user_id)
        if not status_check_users:
            bot.send_message(user_id, error_message)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ–±–ª–æ–∫–æ–≤
        stt_blocks, error_message = is_stt_block_limit(user_id, message.voice.duration)
        if error_message:
            bot.send_message(user_id, error_message)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_id = message.voice.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        status_stt, stt_text = speech_to_text(file)
        if not status_stt:
            bot.send_message(user_id, stt_text)
            return

        # –ó–∞–ø–∏—Å—å –≤ –ë–î
        insert_row(
            [
                user_id,
                stt_text,
                'user',
                0,
                0,
                stt_blocks
            ]
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPT-—Ç–æ–∫–µ–Ω–æ–≤
        last_messages, total_spent_tokens = select_n_last_messages(user_id, COUNT_LAST_MSG)
        total_gpt_tokens, error_message = is_gpt_token_limit(last_messages, total_spent_tokens)
        if error_message:
            bot.send_message(user_id, error_message)
            return

        # –ó–∞–ø—Ä–æ—Å –∫ GPT –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt(last_messages)
        if not status_gpt:
            bot.send_message(user_id, answer_gpt)
            return
        total_gpt_tokens += tokens_in_answer

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è SpeechKit
        tts_symbols, error_message = is_tts_symbol_limit(user_id, answer_gpt)

        # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ GPT –≤ –ë–î
        insert_row(
            [
                user_id,
                answer_gpt,
                'assistant',
                total_gpt_tokens,
                tts_symbols,
                0
            ]
        )

        if error_message:
            bot.send_message(user_id, error_message)
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        status_tts, voice_response = speech_to_text(answer_gpt)
        if status_tts:
            bot.send_voice(user_id, voice_response, reply_to_message_id=message.id)
        else:
            bot.send_message(user_id, answer_gpt, reply_to_message_id=message.id)

    except Exception as e:
        logging.error(e)
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        user_id = message.from_user.id

        status_check_users, error_message = check_number_of_users(user_id)
        if not status_check_users:
            bot.send_message(user_id, error_message)
            return

        insert_row(
            [
                user_id,
                message.text,
                "user",
                0,
                0,
                0
            ]
        )

        last_messages, total_spent_tokens = select_n_last_messages(user_id, COUNT_LAST_MSG)
        total_gpt_tokens, error_message = is_gpt_token_limit(last_messages, total_spent_tokens)
        if error_message:
            bot.send_message(user_id, error_message)
            return

        status_gpt, answer_gpt, tokens_in_answer = ask_gpt(last_messages)
        if not status_gpt:
            bot.send_message(user_id, answer_gpt)
            return

        insert_row(
            [
                user_id,
                answer_gpt,
                "assistant",
                total_gpt_tokens,
                0,
                0
            ]
        )

        bot.send_message(user_id, answer_gpt, reply_to_message_id=message.id)

    except Exception as e:
        logging.error(e)  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ –ª–æ–≥–∏
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda: True)
def handler(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É")


bot.polling()
